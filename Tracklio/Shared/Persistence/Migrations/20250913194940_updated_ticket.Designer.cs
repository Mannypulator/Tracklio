// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tracklio.Shared.Persistence;

#nullable disable

namespace Tracklio.Shared.Persistence.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250913194940_updated_ticket")]
    partial class updated_ticket
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.EnterprisePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DurationPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PlanPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VehiclesAllowed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EnterprisePlans");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.NotificationPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AppealStatusNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DeadlineReminderNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewTicketNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("PaymentReminderNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("boolean");

                    b.Property<int>("ReminderDaysBefore")
                        .HasColumnType("integer");

                    b.Property<bool>("SmsNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.ParkingTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("AppealDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppealUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataProvider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("DiscountedAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ExternalTicketId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastNotificationSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PCNReference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("PaymentDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VRM")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IssuedDate");

                    b.HasIndex("PCNReference")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VRM", "VehicleId");

                    b.ToTable("ParkingTickets");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReceiptUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("RenewalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxVehicles")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("PriceMonthly")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("PriceYearly")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b39e583-69e3-43c7-9938-a70c9c3abb23"),
                            CreatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 278, DateTimeKind.Utc).AddTicks(8030),
                            Currency = "GBP",
                            Description = "Covers one vehicle",
                            DisplayName = "Freemium",
                            Icon = "🆓",
                            IsActive = true,
                            IsPopular = false,
                            MaxVehicles = 1,
                            Name = "freemium",
                            PriceMonthly = 0m,
                            PriceYearly = 0m,
                            UpdatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 278, DateTimeKind.Utc).AddTicks(7940)
                        },
                        new
                        {
                            Id = new Guid("b78cf67d-6fe0-4c67-b283-e58b82e12211"),
                            CreatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 278, DateTimeKind.Utc).AddTicks(8050),
                            Currency = "GBP",
                            Description = "Ads free, up to 5 vehicles",
                            DisplayName = "Solo plan",
                            Icon = "⚡",
                            IsActive = true,
                            IsPopular = true,
                            MaxVehicles = 5,
                            Name = "solo",
                            PriceMonthly = 4.99m,
                            PriceYearly = 59.88m,
                            UpdatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 278, DateTimeKind.Utc).AddTicks(8040)
                        },
                        new
                        {
                            Id = new Guid("18b36c97-498f-4874-8bf8-c0a643e385e5"),
                            CreatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 278, DateTimeKind.Utc).AddTicks(8060),
                            Currency = "GBP",
                            Description = "For families with up to 10 vehicles",
                            DisplayName = "Family plan",
                            Icon = "➕",
                            IsActive = true,
                            IsPopular = false,
                            MaxVehicles = 10,
                            Name = "family",
                            PriceMonthly = 14.99m,
                            PriceYearly = 179.88m,
                            UpdatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 278, DateTimeKind.Utc).AddTicks(8060)
                        },
                        new
                        {
                            Id = new Guid("35861097-7563-49a3-9650-a0ffbce9b09b"),
                            CreatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 278, DateTimeKind.Utc).AddTicks(8070),
                            Currency = "GBP",
                            Description = "For small businesses with up to 15 vehicles",
                            DisplayName = "Fleet plan",
                            Icon = "🎯",
                            IsActive = true,
                            IsPopular = false,
                            MaxVehicles = 15,
                            Name = "fleet",
                            PriceMonthly = 0m,
                            PriceYearly = 0m,
                            UpdatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 278, DateTimeKind.Utc).AddTicks(8060)
                        });
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.SyncLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketsCreated")
                        .HasColumnType("integer");

                    b.Property<int>("TicketsFound")
                        .HasColumnType("integer");

                    b.Property<int>("TicketsProcessed")
                        .HasColumnType("integer");

                    b.Property<int>("TicketsUpdated")
                        .HasColumnType("integer");

                    b.Property<string>("VRM")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("VehicleId");

                    b.HasIndex("DataProvider", "StartedAt");

                    b.ToTable("SyncLogs");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.TicketAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TicketId", "ActionDate");

                    b.ToTable("TicketActions");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.TicketImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketImages");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("HasSubscription")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd81881f-d669-45fa-83ae-2a98539fac82"),
                            CreatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 518, DateTimeKind.Utc).AddTicks(4860),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elizabeth",
                            HasSubscription = false,
                            IsActive = true,
                            LastName = "Adegunwa",
                            PasswordHash = "$2a$11$ZnIfJJdK3Q3TnustZ1fLL.8a6TASw3QV.JbaShdhCu.hJf.pAgMa2",
                            PhoneNumber = "+2348062841527",
                            PhoneNumberConfirmed = true,
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 9, 13, 19, 49, 39, 518, DateTimeKind.Utc).AddTicks(4870)
                        });
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.UserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceToken")
                        .IsUnique();

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.UserOtp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OneTimePassword")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.HasKey("Id");

                    b.ToTable("UserOtps");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId", "IsRevoked");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalSubscriptionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSyncAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Make")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VRM")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VRM", "UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.NotificationPreferences", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.User", "User")
                        .WithOne("NotificationPreferences")
                        .HasForeignKey("Tracklio.Shared.Domain.Entities.NotificationPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.ParkingTicket", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("ParkingTickets")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.User", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.SyncLog", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.TicketAction", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.ParkingTicket", "Ticket")
                        .WithMany("Actions")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.TicketImage", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.ParkingTicket", "Ticket")
                        .WithMany("Images")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.UserDevice", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.UserSubscription", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.SubscriptionPlan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracklio.Shared.Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Tracklio.Shared.Domain.Entities.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.ParkingTicket", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.User", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Subscriptions");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Tracklio.Shared.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("ParkingTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
